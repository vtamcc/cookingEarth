{"version":3,"sources":["assets/res/scripts/Food.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;AAEtF,+BAA0B;AAEpB,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAkC,wBAAY;IAA9C;QAAA,qEA0FC;QAvFG,aAAO,GAAc,IAAI,CAAC;QAG1B,iBAAW,GAAmB,IAAI,CAAC;QACnC,QAAE,GAAW,CAAC,CAAC;QACf,cAAQ,GAAG,EAAE,CAAC;QACd,cAAQ,GAAW,IAAI,CAAC;QACxB,iBAAW,GAAW,CAAC,CAAC;;QA+ExB,iBAAiB;IACrB,CAAC;IA/EG,oBAAK,GAAL;IAEA,CAAC;IAED,oBAAK,GAAL,UAAM,EAAU;QACZ,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,cAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,cAAc;IACd,8CAA8C;IAC9C,kEAAkE;IAClE,uDAAuD;IACvD,6CAA6C;IAC7C,YAAY;IACZ,QAAQ;IAER,IAAI;IAEJ,cAAc;IACd,qDAAqD;IACrD,+CAA+C;IAC/C,mDAAmD;IACnD,OAAO;IACP,IAAI;IAEJ,6BAAc,GAAd,UAAe,EAAU;QACrB,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE;YAClC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;SAChE;aAAM;YACH,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACxC;IACL,CAAC;IACD,0BAAW,GAAX;QAEI,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,cAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAC,CAAC,CAAC,CAAC;YACrC,IAAG,cAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,CAAC,EAAE;aAEnC;YACD,0DAA0D;YAC1D,yCAAyC;YACzC,wCAAwC;YACxC,wCAAwC;YACxC,IAAI;YAEJ,0CAA0C;YAC1C,qCAAqC;YACrC,6CAA6C;YAC7C,mBAAmB;YACnB,qDAAqD;YACrD,IAAI;SAGP;QAED,cAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC3B,iBAAiB;QACjB,kBAAkB;QAClB,iBAAiB;QACjB,mDAAmD;QACnD,uCAAuC;QACvC,0EAA0E;QAC1E,2BAA2B;QAC3B,IAAI;QAEJ,0EAA0E;QAC1E,sCAAsC;QACtC,IAAI;IAER,CAAC;IAED,qBAAM,GAAN;IACA,CAAC;IAtFa,aAAQ,GAAS,IAAI,CAAC;IAEpC;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;yCACM;IAG1B;QADC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC;6CACU;IANlB,IAAI;QADxB,OAAO;OACa,IAAI,CA0FxB;IAAD,WAAC;CA1FD,AA0FC,CA1FiC,EAAE,CAAC,SAAS,GA0F7C;kBA1FoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport Main from \"./Main\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Food extends cc.Component {\n    public static instance: Food = null;\n    @property(cc.Sprite)\n    spfFood: cc.Sprite = null;\n\n    @property(cc.ProgressBar)\n    progressBar: cc.ProgressBar = null;\n    id: number = 0;\n    nodeList = [];\n    duration: number = 0.15;\n    timeElapsed: number = 0;\n    start() {\n\n    }\n\n    setId(id: number) {\n        this.id = id;\n        this.spfFood.spriteFrame = Main.instance.listspfFood[id];\n    }\n\n    // posFood() {\n    //     let food_1 = Main.instance.arrIdFood[0]\n    //     for(let i = 0; i < Main.instance.foodIndices.length; i++) {\n    //         if(Main.instance.foodIndices[i] == food_1) {\n    //             this.nodeList.push(this.node);\n    //         }\n    //     }\n        \n    // }\n\n    // handPos() {\n    //    for(let i = 0; i < this.nodeList.length; i++) {\n    //         let pos = this.nodeList[i].position;\n    //         Main.instance.nodeHand.setPosition(pos);\n    //    }\n    // }\n    \n    updateProgress(dt: number) {\n        if (this.timeElapsed < this.duration) {\n            this.timeElapsed += dt;\n            this.progressBar.progress = this.timeElapsed / this.duration;\n        } else {\n            this.progressBar.progress = 1;\n            this.unschedule(this.updateProgress);\n        }\n    }\n    onClickFood() {\n      \n        Main.instance.listChoose.push(this);\n        if (Main.instance.checkCorrect(this.id)) {\n            this.schedule(this.updateProgress,0);\n            if(Main.instance.countCorrect == 3) {\n               \n            }\n            //console.log(this.node.position.x, this.node.position.y);\n            //console.log(\"Node list \",this.nodeList)\n            // if(Main.instance.countCorrect == 3) {\n            //     this.spfFood.node.active = false;\n            // }\n\n            // if(Main.instance.arrData.length == 3) {\n            //     // cc.tween(this.spfFood.node)\n            //     // .to(2,{position: cc.v3(100,100,0)})\n            //     // .start();\n            //     console.log(\"arr pos \", Main.instance.arrData)\n            // }\n            \n           \n        }\n       \n        Main.instance.updateGame();\n        // this.posFood()\n        // this.handPos();\n        // this.posFood()\n        // console.log(\"list pos \", Main.instance.listPos);\n        // Main.instance.checkCorrect(this.id);\n        // if (Main.instance.countCorrect > 0 && Main.instance.index == this.id) {\n        //     this.node.destroy();\n        // }\n\n        // if(Main.instance.countCorrect > 3  && Main.instance.index == this.id) {\n        //     Main.instance.countCorrect = 0;\n        // }\n\n    }\n    \n    onLoad() {\n    }\n    \n    // update (dt) {}\n}\n"]}